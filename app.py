from flask import Flask, render_template, Response
import cv2
import torch
import torchvision.transforms as transforms
from PIL import Image
from model import EmotionCNN  # Ensure your model class is in this file

# Initialize Flask app
app = Flask(__name__)

# Load the pre-trained emotion model
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = EmotionCNN().to(device)
model.load_state_dict(torch.load('models/emotion_cnn.pth', map_location=device, weights_only=True))

model.eval()

# Define emotion labels
emotion_labels = ["Angry", "Disgust", "Fear", "Happy", "Sad", "Surprise", "Neutral"]

# Define image transformations (same as for the model input)
transform = transforms.Compose([
    transforms.Resize((48, 48)),
    transforms.Grayscale(num_output_channels=1),
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,)),
])

# Initialize the OpenCV face detector (Haar Cascade)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Specify the index of the external webcam (change based on your setup)
camera_index = 0  # Adjust this if needed (0 is usually the default for the primary camera)

def predict_emotion(face_roi):
    """
    This function takes a face region of interest (ROI), processes it,
    and returns the predicted emotion label.
    """
    face_img = Image.fromarray(face_roi)  # Convert to PIL Image
    face_tensor = transform(face_img).unsqueeze(0).to(device)  # Transform and add batch dimension
    with torch.no_grad():
        output = model(face_tensor)
        _, predicted_idx = torch.max(output, 1)  # Get the index of the highest score
        predicted_label = emotion_labels[predicted_idx.item()]  # Map index to emotion label
    return predicted_label

def generate_frames():
    # Open the external webcam
    camera = cv2.VideoCapture(camera_index)

    if not camera.isOpened():
        print(f"Error: Could not access camera with index {camera_index}")
        return

    while True:
        success, frame = camera.read()
        if not success:
            break
        else:
            # Convert the frame to grayscale for face detection
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.1, 4)

            # For each detected face, predict emotion and overlay the label
            for (x, y, w, h) in faces:
                # Extract the face region of interest (ROI)
                face_roi = gray[y:y+h, x:x+w]

                # Predict the emotion
                emotion = predict_emotion(face_roi)

                # Draw a rectangle around the face
                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

                # Overlay the emotion label above the face
                cv2.putText(frame, emotion, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 255, 255), 2)

            # Encode the frame into a JPEG format
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()

            # Yield the frame in byte format for streaming
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/')
def index():
    # Render the HTML page
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    # Return the response generated by the camera frames
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(debug=True)